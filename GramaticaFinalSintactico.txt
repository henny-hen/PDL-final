Terminales = { += == int string else boolean true false ; ( ) cadena let id num , = print input function { } + return - * for ! }

NoTerminales = { Aas Al Bo Ex Fc Fd Fi Fl Fu Iis Li Ma Mp Op Opi P Pl Ps Rs S Se Sl Sp Ty Vd Fcs }

Axioma = Sp

Producciones = {
Sp -> Sl
Sl -> S Sl
Sl -> lambda
S -> Vd ;
S -> Aas ;
S -> Fd
S -> Fl
S -> Ps ;
S -> Iis ;
S -> Fcs ;
Vd -> let id Ty Opi
Ty -> string
Ty -> int
Ty -> boolean
Opi -> = Ex
Opi -> lambda
Aas -> id = Ex
Aas -> id += Ex
Fd -> function id Ty ( Pl ) { Sl Rs }
Fd -> function id ( Pl ) { Sl }
Pl -> P Mp
Pl -> lambda
P -> Ty id
Mp -> , P Mp
Mp -> lambda
Fl -> for ( Fi ; Ex ; Fu ) { Sl }
Fi -> lambda
Fi -> Aas
Fu -> Aas
Ex -> Se Op Ex
Ex -> ! Ex
Ex -> Se
Ex -> Fc
Se -> id
Se -> Li
Se -> ( Ex )
Op -> +
Op -> ==
Op -> -
Op -> *
Li -> num
Li -> cadena
Li -> Bo
Bo -> true
Bo -> false
Rs -> return Ex ;
Ps -> print Ex
Fc -> id ( Al )
Al -> Ex Ma
Al -> lambda
Ma -> , Ex Ma
Ma -> lambda
Iis -> input id
Fcs -> Fc
}
